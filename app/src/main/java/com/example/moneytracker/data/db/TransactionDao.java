package com.example.moneytracker.data.db;import androidx.lifecycle.LiveData;import androidx.room.Dao;import androidx.room.Delete;import androidx.room.Insert;import androidx.room.OnConflictStrategy;import androidx.room.Query;import androidx.room.Update;import com.example.moneytracker.data.model.CategorySpending;import java.util.List;import javax.inject.Inject;@Daopublic interface TransactionDao {    // Получение транзакций, отсортированных по дате (новые вверху)    @Query("SELECT * FROM transactions ORDER BY date DESC")    LiveData<List<Transaction>> getAllTransactions();    // Получение транзакций за определенный месяц и год    @Query("SELECT * FROM transactions WHERE date >= :startDate AND date <= :endDate ORDER BY date DESC")    LiveData<List<Transaction>> getTransactionsInDateRange(long startDate, long endDate);    @Query("SELECT SUM(amount) FROM transactions WHERE type = :transactionType AND date >= :startDate AND date <= :endDate")    LiveData<Double> getTotalAmountByTypeAndDateRange(String transactionType, long startDate,                                               long endDate);    @Insert(onConflict = OnConflictStrategy.REPLACE)    void insertTransaction(Transaction transaction);    @Delete    void deleteTransaction(Transaction transaction);    @Update    void updateTransaction(Transaction transaction);    @Query("SELECT * FROM transactions WHERE id = :transactionId")    LiveData<Transaction> getTransactionById(int transactionId);    @Query("SELECT * FROM transactions WHERE date BETWEEN :startDate AND :endDate AND label LIKE '%' || :query || '%' ORDER BY date DESC")    LiveData<List<Transaction>> getTransactionsByDateAndQuery(long startDate, long endDate, String query);    @Query("SELECT SUM(amount) FROM transactions WHERE date <= :endDate")    LiveData<Double> getTotalBalanceUpToDate(long endDate);}