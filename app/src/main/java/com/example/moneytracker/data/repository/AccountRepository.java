package com.example.moneytracker.data.repository;import androidx.lifecycle.LiveData;import com.example.moneytracker.data.db.Account;import com.example.moneytracker.data.db.AccountDao;import com.example.moneytracker.data.model.AccountWithBalance;import com.example.moneytracker.interfaces.IAccountRepository;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import javax.inject.Inject;import javax.inject.Singleton;@Singletonpublic class AccountRepository implements IAccountRepository {    private final AccountDao accountDao;    private final ExecutorService executorService;    @Inject    public AccountRepository(AccountDao accountDao) {        this.accountDao = accountDao;        this.executorService = Executors.newSingleThreadExecutor();    }    @Override    public LiveData<List<AccountWithBalance>> getAccountsWithBalance() {        return accountDao.getAccountsWithBalance();    }    @Override    public LiveData<Account> getAccountById(int accountId) {        return accountDao.getAccountById(accountId);    }    @Override    public void insert(Account account) {        executorService.execute(() -> accountDao.insertAccount(account));    }    @Override    public void update(Account account) {        executorService.execute(() -> accountDao.updateAccount(account));    }    @Override    public void delete(Account account) {        executorService.execute(() -> accountDao.deleteAccount(account));    }}