package com.example.moneytracker.data.repository;import androidx.lifecycle.LiveData;import com.example.moneytracker.data.db.Transaction;import com.example.moneytracker.data.db.TransactionDao;import com.example.moneytracker.interfaces.ITransactionRepository;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import javax.inject.Inject;import javax.inject.Singleton;@Singletonpublic class TransactionRepository implements ITransactionRepository {    private final TransactionDao transactionDao;    private final ExecutorService executorService;    @Inject    public TransactionRepository(TransactionDao transactionDao) {        this.transactionDao = transactionDao;        this.executorService = Executors.newSingleThreadExecutor();    }    @Override    public LiveData<List<Transaction>> getAllTransactions() {        return transactionDao.getAllTransactions();    }    @Override    public LiveData<List<Transaction>> getTransactionsInDateRange(long startDate, long endDate) {        return transactionDao.getTransactionsInDateRange(startDate, endDate);    }    @Override    public LiveData<Double> getTotalAmountByTypeAndDateRange(String transactionType, long startDate, long endDate) {        return transactionDao.getTotalAmountByTypeAndDateRange(transactionType, startDate, endDate);    }    @Override    public void insertTransaction(Transaction transaction) {        executorService.execute(() -> transactionDao.insertTransaction(transaction));    }    @Override    public void updateTransaction(Transaction transaction) {        executorService.execute(() -> transactionDao.updateTransaction(transaction));    }    @Override    public void deleteTransaction(Transaction transaction) {        executorService.execute(() -> transactionDao.deleteTransaction(transaction));    }    @Override    public LiveData<Transaction> getTransactionById(int transactionId) {        return transactionDao.getTransactionById(transactionId);    }    @Override    public LiveData<Double> getTotalBalanceUpToDate(long endDate) {        return transactionDao.getTotalBalanceUpToDate(endDate);    }    @Override    public LiveData<List<Transaction>> getTransactionsByDateAndQuery(long startDate, long endDate, String query) {        return transactionDao.getTransactionsByDateAndQuery(startDate, endDate, query);    }}