// ФАЙЛ: di/DatabaseModule.javapackage com.example.moneytracker.di;import android.content.Context;import androidx.annotation.NonNull;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.sqlite.db.SupportSQLiteDatabase;import com.example.moneytracker.data.db.Account;import com.example.moneytracker.data.db.AccountDao;import com.example.moneytracker.data.db.AppDatabase;import com.example.moneytracker.data.db.Category;import com.example.moneytracker.data.db.CategoryDao;import com.example.moneytracker.data.db.TransactionDao;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import javax.inject.Provider;import javax.inject.Singleton;import dagger.Module;import dagger.Provides;import dagger.hilt.InstallIn;import dagger.hilt.android.qualifiers.ApplicationContext;import dagger.hilt.components.SingletonComponent;@Module@InstallIn(SingletonComponent.class)public class DatabaseModule {    // Мы создаем ExecutorService здесь, чтобы использовать его в колбэке    private static final ExecutorService databaseWriteExecutor = Executors.newSingleThreadExecutor();    @Provides    @Singleton    public AppDatabase provideDatabase(@ApplicationContext Context context,                                       // Hilt теперь предоставит нам наш Callback                                       RoomDatabase.Callback roomCallback) {        return Room.databaseBuilder(                        context,                        AppDatabase.class,                        "money_tracker.db"                )                .fallbackToDestructiveMigration()                // ++ ВОТ ОНА, МАГИЯ: ДОБАВЛЯЕМ КОЛБЭК ПРИ СОЗДАНИИ БД ++                .addCallback(roomCallback)                .build();    }    // ++ НОВЫЙ МЕТОД, КОТОРЫЙ СОЗДАЕТ НАШ КОЛБЭК ++    @Provides    @Singleton    public RoomDatabase.Callback provideCallback(            Provider<CategoryDao> categoryDaoProvider,            Provider<AccountDao> accountDaoProvider                                                 ) {        return new RoomDatabase.Callback() {            @Override            public void onCreate(@NonNull SupportSQLiteDatabase db) {                super.onCreate(db);                // Этот код выполнится ОДИН РАЗ, когда база будет создана.                // Мы запускаем его в отдельном потоке, так как операции с БД нельзя делать в главном потоке.                databaseWriteExecutor.execute(() -> {                    // Получаем DAO с помощью Hilt-провайдера.                    CategoryDao dao = categoryDaoProvider.get();                    // Вставляем наши дефолтные категории                    dao.insert(new Category("Еда", "ic_cat_food"));                    dao.insert(new Category("Транспорт", "ic_cat_transport"));                    dao.insert(new Category("Развлечения", "ic_cat_fun"));                    dao.insert(new Category("Зарплата", "ic_cat_salary"));                    AccountDao accountDao = accountDaoProvider.get();                    accountDao.insertAccount(new Account("Наличные", "ic_account_cash", 0));                    accountDao.insertAccount(new Account("Карта", "ic_account_card", 0));                });            }        };    }    @Provides    public TransactionDao provideTransactionDao(AppDatabase appDatabase) {        return appDatabase.transactionDao();    }    @Provides    public CategoryDao provideCategoryDao(AppDatabase appDatabase) {        return appDatabase.categoryDao();    }    @Provides    public AccountDao provideAccountDao(AppDatabase appDatabase) {        return appDatabase.accountDao();    }}