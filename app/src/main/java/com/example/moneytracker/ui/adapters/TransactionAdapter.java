package com.example.moneytracker.ui.adapters;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DiffUtil;import androidx.recyclerview.widget.ListAdapter;import androidx.recyclerview.widget.RecyclerView;import com.example.moneytracker.R;import com.example.moneytracker.data.db.Account;import com.example.moneytracker.data.db.Transaction;import com.example.moneytracker.data.db.Category;import com.example.moneytracker.data.model.AccountWithBalance;import com.example.moneytracker.utils.DateUtils;import java.text.NumberFormat;import java.util.List;import java.util.Locale;public class TransactionAdapter        extends ListAdapter<Transaction, TransactionAdapter.TransactionViewHolder> {    public interface OnDeleteClickListener {        void onDelete(@NonNull Transaction transaction);    }    public interface OnItemClickListener {        void onItemClick(@NonNull Transaction transaction);    }    private final OnDeleteClickListener deleteListener;    private final OnItemClickListener itemClickListener;    private List<Category> categories;    private List<AccountWithBalance> accounts;    public TransactionAdapter(@NonNull List<Category> categories,                              @NonNull List<AccountWithBalance> accounts,                              OnItemClickListener itemClickListener,                              OnDeleteClickListener deleteListener) {        super(DIFF_CALLBACK);        this.deleteListener = deleteListener;        this.itemClickListener = itemClickListener;        this.categories = categories;        this.accounts = accounts;    }    public void setCategories(List<Category> categories) {        this.categories = categories;        notifyDataSetChanged();    }    public void setAccounts(List<AccountWithBalance> accounts) {        this.accounts = accounts;        notifyDataSetChanged();    }    private static final DiffUtil.ItemCallback<Transaction> DIFF_CALLBACK =            new DiffUtil.ItemCallback<Transaction>() {                @Override                public boolean areItemsTheSame(@NonNull Transaction oldItem, @NonNull Transaction newItem) {                    return oldItem.id == newItem.id;                }                @Override                public boolean areContentsTheSame(@NonNull Transaction oldItem, @NonNull Transaction newItem) {                    boolean categoryIdsMatch = (oldItem.categoryId == null && newItem.categoryId == null)                            || (oldItem.categoryId != null && oldItem.categoryId.equals(newItem.categoryId));                    return oldItem.label.equals(newItem.label)                            && oldItem.amount == newItem.amount                            && oldItem.type.equals(newItem.type)                            && categoryIdsMatch                            && oldItem.accountId == newItem.accountId                            && oldItem.date == newItem.date;                }            };    @NonNull    @Override    public TransactionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View itemView = LayoutInflater.from(parent.getContext())                .inflate(R.layout.item_transaction, parent, false);        return new TransactionViewHolder(itemView);    }    @Override    public void onBindViewHolder(@NonNull TransactionViewHolder holder, int position) {        Transaction tx = getItem(position);        holder.bind(tx, itemClickListener, deleteListener, this.categories, this.accounts);    }    static class TransactionViewHolder extends RecyclerView.ViewHolder {        private final ImageView ivCategory;        private final TextView tvLabel;        private final TextView tvCategory;        private final TextView tvAccount;        private final TextView tvAmount;        private final ImageButton btnDelete;        private final TextView tvDate;        public TransactionViewHolder(@NonNull View itemView) {            super(itemView);            ivCategory = itemView.findViewById(R.id.image_view_category_icon);            tvLabel = itemView.findViewById(R.id.text_view_label);            tvCategory = itemView.findViewById(R.id.text_view_category);            tvAccount = itemView.findViewById(R.id.text_view_account);            tvAmount = itemView.findViewById(R.id.text_view_amount);            btnDelete = itemView.findViewById(R.id.button_delete);            tvDate = itemView.findViewById(R.id.text_view_date);        }        public void bind(@NonNull Transaction tx,                         @NonNull OnItemClickListener itemListener,                         @NonNull OnDeleteClickListener deleteListener,                         @NonNull List<Category> categories,                         @NonNull List<AccountWithBalance> accounts) {            String categoryName = "Без категории";            int iconResId = R.drawable.ic_cat_transport;            if (tx.categoryId != null && categories != null) {                for (Category category : categories) {                    if (category.id == tx.categoryId) {                        categoryName = category.name;                        Context context = itemView.getContext();                        iconResId = context.getResources().getIdentifier(                                category.iconName, "drawable", context.getPackageName()                        );                        if (iconResId == 0) {                            iconResId = R.drawable.ic_cat_transport;                        }                        break;                    }                }            }            String accountName = "";            if (accounts != null) {                for (AccountWithBalance account : accounts) {                    if (account.account.id == tx.accountId) {                        accountName = "" + account.account.name;                        break;                    }                }            }            tvAccount.setText(accountName);            ivCategory.setImageResource(iconResId);            tvCategory.setText(categoryName);            tvLabel.setText(tx.label);            tvDate.setText(DateUtils.formatDateForDisplay(tx.date));            NumberFormat fmt = NumberFormat.getCurrencyInstance(new Locale("kz", "KZ"));            tvAmount.setText(fmt.format(tx.amount));            int colorRes = tx.amount < 0                    ? android.R.color.holo_red_dark                    : android.R.color.holo_green_dark;            tvAmount.setTextColor(ContextCompat.getColor(itemView.getContext(), colorRes));            btnDelete.setOnClickListener(v -> deleteListener.onDelete(tx));            itemView.setOnClickListener(v -> itemListener.onItemClick(tx));        }    }}