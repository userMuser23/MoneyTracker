package com.example.moneytracker.ui.fragments;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.fragment.NavHostFragment;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.moneytracker.R;import com.example.moneytracker.data.db.Category;import com.example.moneytracker.ui.adapters.IconSelectionAdapter;import com.example.moneytracker.viewmodel.CategoriesViewModel;import com.google.android.material.appbar.MaterialToolbar;import com.google.android.material.button.MaterialButton;import com.google.android.material.textfield.TextInputEditText;import java.util.Arrays;import java.util.List;import dagger.hilt.android.AndroidEntryPoint;@AndroidEntryPointpublic class AddEditCategoryFragment extends Fragment {    private CategoriesViewModel viewModel;    private TextInputEditText etCategoryName;    private RecyclerView recyclerIcons;    private MaterialButton btnSave;    private MaterialToolbar toolbar;    private IconSelectionAdapter iconAdapter;    private int categoryId = -1;    private Category currentCategory = null;    private String selectedIconName;    private final List<String> availableIcons = Arrays.asList(            "ic_cat_food", "ic_cat_transport", "ic_cat_fun", "ic_cat_salary",            "ic_cat_health", "ic_cat_shopping", "ic_cat_clothes", "ic_cat_beauty"    );    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_add_edit_category, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        viewModel = new ViewModelProvider(this).get(CategoriesViewModel.class);        if (getArguments() != null) {            categoryId = getArguments().getInt("categoryId", -1);        }        findViews(view);        setupToolbar();        setupListeners();        if (categoryId != -1) {            toolbar.setTitle("Редактировать категорию");            loadCategoryData();        } else {            toolbar.setTitle("Новая категория");            setupIconRecycler(availableIcons.get(0));        }    }    private void findViews(View view) {        etCategoryName = view.findViewById(R.id.et_category_name);        recyclerIcons = view.findViewById(R.id.recycler_icons);        btnSave = view.findViewById(R.id.btn_save_category);        toolbar = view.findViewById(R.id.toolbar_add_edit_category);    }    private void setupToolbar() {        toolbar.setNavigationOnClickListener(v -> NavHostFragment.findNavController(this).navigateUp());    }    private void loadCategoryData() {        viewModel.getCategoryById(categoryId).observe(getViewLifecycleOwner(), category -> {            if (category != null) {                currentCategory = category;                etCategoryName.setText(category.name);                setupIconRecycler(category.iconName);            }        });    }    private void setupIconRecycler(String initialIconName) {        this.selectedIconName = initialIconName;        iconAdapter = new IconSelectionAdapter(availableIcons, selectedIconName, iconName -> {            this.selectedIconName = iconName;            iconAdapter.setSelectedIconName(iconName);        });        recyclerIcons.setAdapter(iconAdapter);        recyclerIcons.setLayoutManager(new GridLayoutManager(getContext(), 5));    }    private void setupListeners() {        btnSave.setOnClickListener(v -> saveCategory());    }    private void saveCategory() {        String name = etCategoryName.getText().toString().trim();        if (name.isEmpty()) {            Toast.makeText(getContext(), "Введите название категории", Toast.LENGTH_SHORT).show();            return;        }        if (selectedIconName == null) {            Toast.makeText(getContext(), "Выберите иконку", Toast.LENGTH_SHORT).show();            return;        }        if (currentCategory != null) {            currentCategory.name = name;            currentCategory.iconName = selectedIconName;            viewModel.update(currentCategory);            Toast.makeText(getContext(), "Категория обновлена", Toast.LENGTH_SHORT).show();        } else {            Category newCategory = new Category(name, selectedIconName);            viewModel.insert(newCategory);            Toast.makeText(getContext(), "Категория сохранена", Toast.LENGTH_SHORT).show();        }        NavHostFragment.findNavController(this).navigateUp();    }}