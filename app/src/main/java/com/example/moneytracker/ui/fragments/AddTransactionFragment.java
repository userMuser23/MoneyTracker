package com.example.moneytracker.ui.fragments;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.Button;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.Navigation;import com.example.moneytracker.R;import com.example.moneytracker.data.db.Account;import com.example.moneytracker.data.db.Category;import com.example.moneytracker.data.db.Transaction;import com.example.moneytracker.data.model.AccountWithBalance;import com.example.moneytracker.utils.Constants;import com.example.moneytracker.viewmodel.MainViewModel;import com.google.android.material.button.MaterialButtonToggleGroup;import com.google.android.material.textfield.TextInputEditText;import java.util.ArrayList;import java.util.List;import java.util.Locale;import dagger.hilt.android.AndroidEntryPoint;@AndroidEntryPointpublic class AddTransactionFragment extends Fragment {    private MainViewModel viewModel;    private int transactionId = -1;    private Transaction currentTransaction = null;    private List<Category> categoryList = new ArrayList<>();    private List<AccountWithBalance> accountList = new ArrayList<>();    private TextInputEditText etAmount;    private TextInputEditText etLabel;    private MaterialButtonToggleGroup toggleGroupType;    private AutoCompleteTextView actvCategory;    private AutoCompleteTextView actvAccount;    private Button btnSave;    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_add_transaction, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        viewModel = new ViewModelProvider(requireActivity()).get(MainViewModel.class);        if (getArguments() != null) {            transactionId = getArguments().getInt("transactionId", -1);        }        findViews(view);        setupObservers();        setupListeners();        // Определяем режим работы        if (transactionId != -1) {            requireActivity().setTitle("Редактировать транзакцию");            loadTransactionData();        } else {            requireActivity().setTitle("Новая транзакция");            toggleGroupType.check(R.id.btn_expense);        }    }    private void setupObservers() {        observeCategories();        observeAccounts();    }    private void observeCategories() {        viewModel.allCategories.observe(getViewLifecycleOwner(), categories -> {            if (categories != null && !categories.isEmpty()) {                this.categoryList = categories;                List<String> categoryNames = new ArrayList<>();                for (Category category : categories) {                    categoryNames.add(category.name);                }                ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_dropdown_item_1line, categoryNames);                actvCategory.setAdapter(adapter);                updateCategorySelection();            }        });    }    private void observeAccounts() {        viewModel.allAccountsWithBalance.observe(getViewLifecycleOwner(), accountsWithBalance -> {            if (accountsWithBalance != null && !accountsWithBalance.isEmpty()) {                this.accountList = accountsWithBalance;                List<String> accountNames = new ArrayList<>();                for (AccountWithBalance awb : accountsWithBalance) {                    accountNames.add(awb.account.name);                }                ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_dropdown_item_1line, accountNames);                actvAccount.setAdapter(adapter);                updateAccountSelection();            }        });    }    private void loadTransactionData() {        viewModel.getTransactionById(transactionId).observe(getViewLifecycleOwner(), transaction -> {            if (transaction != null) {                this.currentTransaction = transaction;                etLabel.setText(transaction.label);                etAmount.setText(String.format(Locale.US, "%.2f", Math.abs(transaction.amount)));                if (Constants.TRANSACTION_TYPE_INCOME.equals(transaction.type)) {                    toggleGroupType.check(R.id.btn_income);                } else {                    toggleGroupType.check(R.id.btn_expense);                }                // Пытаемся установить название категории                updateCategorySelection();                updateAccountSelection();            }        });    }    private void updateCategorySelection() {        if (currentTransaction != null && currentTransaction.categoryId != null && !categoryList.isEmpty()) {            for (Category category : categoryList) {                if (category.id == currentTransaction.categoryId) {                    actvCategory.setText(category.name, false);                    break;                }            }        }    }    private void updateAccountSelection() {        if (currentTransaction != null && !accountList.isEmpty()) {            for (AccountWithBalance awb : accountList) {                if (awb.account.id == currentTransaction.accountId) {                    actvAccount.setText(awb.account.name, false);                    break;                }            }        }    }    private void saveTransaction() {        String amountStr = etAmount.getText().toString().trim();        String label = etLabel.getText().toString().trim();        String categoryName = actvCategory.getText().toString().trim();        String accountName = actvAccount.getText().toString().trim();        if (amountStr.isEmpty() || label.isEmpty() || categoryName.isEmpty() || accountName.isEmpty()) {            Toast.makeText(requireContext(), "Пожалуйста, заполните все поля", Toast.LENGTH_SHORT).show();            return;        }        Integer categoryId = null;        for (Category cat : categoryList) {            if (cat.name.equals(categoryName)) {                categoryId = cat.id;                break;            }        }        Integer accountId = null;        for (AccountWithBalance awb : accountList) {            if (awb.account.name.equals(accountName)) {                accountId = awb.account.id;                break;            }        }        if (categoryId == null || accountId == null) {            Toast.makeText(requireContext(), "Пожалуйста, выберите категорию и счет из списка",                    Toast.LENGTH_SHORT).show();            return;        }        double rawAmount;        try {            rawAmount = Double.parseDouble(amountStr);        } catch (NumberFormatException e) {            Toast.makeText(requireContext(), "Неверный формат суммы", Toast.LENGTH_SHORT).show();            return;        }        int checkedButtonId = toggleGroupType.getCheckedButtonId();        String type = (checkedButtonId == R.id.btn_income)                ? Constants.TRANSACTION_TYPE_INCOME                : Constants.TRANSACTION_TYPE_EXPENSE;        double amount = type.equals(Constants.TRANSACTION_TYPE_EXPENSE)                ? -Math.abs(rawAmount)                : Math.abs(rawAmount);        if (currentTransaction != null) {            currentTransaction.label = label;            currentTransaction.amount = amount;            currentTransaction.type = type;            currentTransaction.categoryId = categoryId; // Сохраняем ID            currentTransaction.accountId = accountId;            viewModel.updateTransaction(currentTransaction);            Toast.makeText(requireContext(), "Транзакция обновлена", Toast.LENGTH_SHORT).show();        } else {            viewModel.addTransaction(label, amount, type, categoryId, accountId);            Toast.makeText(requireContext(), "Транзакция сохранена", Toast.LENGTH_SHORT).show();        }        Navigation.findNavController(requireView()).navigateUp();    }    private void findViews(@NonNull View view) {        etAmount = view.findViewById(R.id.et_amount);        etLabel = view.findViewById(R.id.et_label);        toggleGroupType = view.findViewById(R.id.toggle_button_group_type);        actvCategory = view.findViewById(R.id.actv_category);        actvAccount = view.findViewById(R.id.actv_account);        btnSave = view.findViewById(R.id.btn_save);    }    private void setupListeners() {        btnSave.setOnClickListener(v -> saveTransaction());    }}