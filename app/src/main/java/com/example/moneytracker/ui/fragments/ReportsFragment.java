package com.example.moneytracker.ui.fragments;import android.app.DatePickerDialog;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.fragment.NavHostFragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.moneytracker.R;import com.example.moneytracker.ui.adapters.TransactionAdapter;import com.example.moneytracker.viewmodel.MainViewModel;import com.example.moneytracker.viewmodel.ReportsViewModel;import com.google.android.material.appbar.MaterialToolbar;import com.google.android.material.button.MaterialButton;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Locale;import dagger.hilt.android.AndroidEntryPoint;@AndroidEntryPointpublic class ReportsFragment extends Fragment {    private ReportsViewModel reportsViewModel;    private MainViewModel mainViewModel;    private TransactionAdapter adapter;    private MaterialToolbar toolbar;    private MaterialButton btnStartDate;    private MaterialButton btnEndDate;    private TextView tvReportIncome;    private TextView tvReportExpense;    private RecyclerView recyclerView;    private final Calendar startCalendar = Calendar.getInstance();    private final Calendar endCalendar = Calendar.getInstance();    private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.getDefault());    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_reports, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        reportsViewModel = new ViewModelProvider(this).get(ReportsViewModel.class);        mainViewModel = new ViewModelProvider(requireActivity()).get(MainViewModel.class);        findViews(view);        setupToolbar();        setupInitialDates();        setupRecyclerView();        setupClickListeners();        setupObservers();    }    private void findViews(View view) {        btnStartDate = view.findViewById(R.id.btn_start_date);        btnEndDate = view.findViewById(R.id.btn_end_date);        tvReportIncome = view.findViewById(R.id.tv_report_income);        tvReportExpense = view.findViewById(R.id.tv_report_expense);        recyclerView = view.findViewById(R.id.recycler_report_transactions);        toolbar = view.findViewById(R.id.toolbar_reports);    }    private void setupToolbar() {        toolbar.setNavigationOnClickListener(v -> {            NavHostFragment.findNavController(this).navigateUp();        });    }    private void setupInitialDates() {        startCalendar.set(Calendar.DAY_OF_MONTH, 1);        updateDateButtons();        updateViewModelDateRange();    }    private void setupRecyclerView() {        adapter = new TransactionAdapter(                new ArrayList<>(),                new ArrayList<>(),                transaction -> {                    Bundle bundle = new Bundle();                    bundle.putInt("transactionId", transaction.id);                },                transaction -> mainViewModel.deleteTransaction(transaction)        );        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        recyclerView.setAdapter(adapter);    }    private void setupClickListeners() {        btnStartDate.setOnClickListener(v -> showDatePickerDialog(true));        btnEndDate.setOnClickListener(v -> showDatePickerDialog(false));    }    private void setupObservers() {        mainViewModel.allCategories.observe(getViewLifecycleOwner(), categories -> {            if (categories != null && adapter != null) {                adapter.setCategories(categories);            }        });        mainViewModel.allAccountsWithBalance.observe(getViewLifecycleOwner(), accountsWithBalance -> {            if (accountsWithBalance != null && adapter != null) {                adapter.setAccounts(accountsWithBalance);            }        });        reportsViewModel.transactionsForPeriod.observe(getViewLifecycleOwner(), transactions -> {            if (adapter != null) {                adapter.submitList(transactions);            }        });        reportsViewModel.incomeForPeriod.observe(getViewLifecycleOwner(), income -> {            double value = income != null ? income : 0.0;            tvReportIncome.setText(String.format(Locale.getDefault(), "%.2f", value));        });        reportsViewModel.expenseForPeriod.observe(getViewLifecycleOwner(), expense -> {            double value = expense != null ? Math.abs(expense) : 0.0;            tvReportExpense.setText(String.format(Locale.getDefault(), "%.2f", value));        });    }    private void showDatePickerDialog(boolean isStartDate) {        Calendar calendarToUpdate = isStartDate ? startCalendar : endCalendar;        DatePickerDialog.OnDateSetListener dateSetListener = (view, year, month, dayOfMonth) -> {            calendarToUpdate.set(year, month, dayOfMonth);            updateDateButtons();            updateViewModelDateRange();        };        new DatePickerDialog(requireContext(), dateSetListener,                calendarToUpdate.get(Calendar.YEAR),                calendarToUpdate.get(Calendar.MONTH),                calendarToUpdate.get(Calendar.DAY_OF_MONTH)).show();    }    private void updateDateButtons() {        btnStartDate.setText(dateFormat.format(startCalendar.getTime()));        btnEndDate.setText(dateFormat.format(endCalendar.getTime()));    }    private void updateViewModelDateRange() {        reportsViewModel.setDateRange(startCalendar.getTimeInMillis(), endCalendar.getTimeInMillis());    }}