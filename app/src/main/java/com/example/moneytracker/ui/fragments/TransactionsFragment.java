package com.example.moneytracker.ui.fragments;import android.app.DatePickerDialog;import android.os.Bundle;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import androidx.appcompat.widget.SearchView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.view.MenuProvider;import androidx.fragment.app.Fragment;import androidx.lifecycle.Lifecycle;import androidx.lifecycle.ViewModelProvider;import androidx.navigation.NavController;import androidx.navigation.fragment.NavHostFragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.moneytracker.R;import com.example.moneytracker.data.db.Category;import com.example.moneytracker.ui.adapters.TransactionAdapter;import com.example.moneytracker.viewmodel.MainViewModel;import com.google.android.material.appbar.MaterialToolbar;import com.google.android.material.floatingactionbutton.FloatingActionButton;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import java.util.Locale;import dagger.hilt.android.AndroidEntryPoint;@AndroidEntryPointpublic class TransactionsFragment extends Fragment {    private RecyclerView recyclerView;    private TransactionAdapter adapter;    private View emptyView;    private TextView tvDateHeader;    private MaterialToolbar toolbar;    private TextView tvValueExpense;    private TextView tvValueIncome;    private TextView tvValueBalance;    private FloatingActionButton fab;    private MainViewModel viewModel;    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_transactions, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        viewModel = new ViewModelProvider(this).get(MainViewModel.class);        findViews(view);        setupToolbar();        setupRecyclerView();        setupObservers();        setupClickListeners();    }    private void setupRecyclerView() {        adapter = new TransactionAdapter(                new ArrayList<>(),                new ArrayList<>(),                transaction -> {                    Bundle bundle = new Bundle();                    bundle.putInt("transactionId", transaction.id);                    NavHostFragment.findNavController(this)                            .navigate(R.id.action_transactionsFragment_to_addTransactionFragment, bundle);                },                transaction -> viewModel.deleteTransaction(transaction)        );        recyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));        recyclerView.setAdapter(adapter);    }    private void setupToolbar() {        toolbar.addMenuProvider(new MenuProvider() {            @Override            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {                menuInflater.inflate(R.menu.transactions_menu, menu);                MenuItem searchItem = menu.findItem(R.id.action_search);                SearchView searchView = (SearchView) searchItem.getActionView();                searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {                    @Override                    public boolean onQueryTextSubmit(String query) {                        viewModel.setSearchQuery(query);                        searchView.clearFocus();                        return true;                    }                    @Override                    public boolean onQueryTextChange(String newText) {                        viewModel.setSearchQuery(newText);                        return true;                    }                });            }            @Override            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {                return false;            }        }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);    }    private void setupObservers() {        viewModel.allCategories.observe(getViewLifecycleOwner(), categories -> {            if (categories != null && adapter != null) {                adapter.setCategories(categories);            }        });        viewModel.allAccountsWithBalance.observe(getViewLifecycleOwner(), accounts -> {            if (accounts != null && adapter != null) {                adapter.setAccounts(accounts);            }        });        viewModel.filteredTransactions.observe(getViewLifecycleOwner(), transactions -> {            if (adapter != null) {                boolean isEmpty = transactions == null || transactions.isEmpty();                emptyView.setVisibility(isEmpty ? View.VISIBLE : View.GONE);                recyclerView.setVisibility(isEmpty ? View.GONE : View.VISIBLE);                adapter.submitList(transactions);            }        });        viewModel.incomeForPeriod.observe(getViewLifecycleOwner(), income -> {            double value = income != null ? income : 0.0;            tvValueIncome.setText(String.format(Locale.getDefault(), "%.2f", value));        });        viewModel.expenseForPeriod.observe(getViewLifecycleOwner(), expense -> {            double value = expense != null ? Math.abs(expense) : 0.0;            tvValueExpense.setText(String.format(Locale.getDefault(), "%.2f", value));        });        viewModel.totalBalance.observe(getViewLifecycleOwner(), balance -> {            double val = balance != null ? balance : 0.0;            tvValueBalance.setText(String.format(Locale.getDefault(), "%.2f", val));        });        viewModel.selectedDateString.observe(getViewLifecycleOwner(), dateString -> {            if (dateString != null) {                tvDateHeader.setText(dateString.toUpperCase());            }        });    }    private void setupClickListeners() {        tvDateHeader.setOnClickListener(v -> showDatePickerDialog());        fab.setOnClickListener(v -> {            NavHostFragment.findNavController(this).navigate(R.id.action_transactionsFragment_to_addTransactionFragment);        });    }    private void showDatePickerDialog() {        Calendar current = viewModel.getSelectedDate() != null                ? viewModel.getSelectedDate()                : Calendar.getInstance();        DatePickerDialog picker = new DatePickerDialog(                requireContext(),                (datePicker, year, month, day) -> {                    Calendar newSelectedDate = Calendar.getInstance();                    newSelectedDate.set(Calendar.YEAR, year);                    newSelectedDate.set(Calendar.MONTH, month);                    newSelectedDate.set(Calendar.DAY_OF_MONTH, day);                    viewModel.setSelectedDate(newSelectedDate);                },                current.get(Calendar.YEAR),                current.get(Calendar.MONTH),                current.get(Calendar.DAY_OF_MONTH)        );        picker.show();    }    private void findViews(@NonNull View view) {        tvDateHeader = view.findViewById(R.id.tv_date_header);        tvValueExpense = view.findViewById(R.id.tv_value_expense);        tvValueIncome = view.findViewById(R.id.tv_value_income);        tvValueBalance = view.findViewById(R.id.tv_value_balance);        recyclerView = view.findViewById(R.id.recycler_transactions);        emptyView = view.findViewById(R.id.empty_view);        toolbar = view.findViewById(R.id.toolbar_transactions);        fab = view.findViewById(R.id.fab);    }}