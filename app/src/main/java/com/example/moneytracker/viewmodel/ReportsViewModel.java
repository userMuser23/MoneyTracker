package com.example.moneytracker.viewmodel;import androidx.core.util.Pair;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.lifecycle.Transformations;import androidx.lifecycle.ViewModel;import com.example.moneytracker.data.db.Transaction;import com.example.moneytracker.data.repository.TransactionRepository;import com.example.moneytracker.interfaces.ITransactionRepository;import com.example.moneytracker.utils.Constants;import com.example.moneytracker.utils.DateUtils;import java.util.Calendar;import java.util.List;import javax.inject.Inject;import dagger.hilt.android.lifecycle.HiltViewModel;@HiltViewModelpublic class ReportsViewModel extends ViewModel {    private final ITransactionRepository repository;    private final MutableLiveData<Pair<Long, Long>> dateRangeLiveData = new MutableLiveData<>();    public final LiveData<List<Transaction>> transactionsForPeriod;    public final LiveData<Double> incomeForPeriod;    public final LiveData<Double> expenseForPeriod;    @Inject    public ReportsViewModel(ITransactionRepository repository) {        this.repository = repository;        transactionsForPeriod = Transformations.switchMap(dateRangeLiveData, range -> {            if (range == null) return new MutableLiveData<>();            return repository.getTransactionsInDateRange(range.first, range.second);        });        incomeForPeriod = Transformations.switchMap(dateRangeLiveData, range -> {            if (range == null) return new MutableLiveData<>();            return repository.getTotalAmountByTypeAndDateRange(Constants.TRANSACTION_TYPE_INCOME, range.first, range.second);        });        expenseForPeriod = Transformations.switchMap(dateRangeLiveData, range -> {            if (range == null) return new MutableLiveData<>();            return repository.getTotalAmountByTypeAndDateRange(Constants.TRANSACTION_TYPE_EXPENSE, range.first, range.second);        });        setPeriodToCurrentMonth();    }    public void setDateRange(long startDate, long endDate) {        if (startDate <= endDate) {            dateRangeLiveData.setValue(new Pair<>(startDate, endDate));        }    }    private void setPeriodToCurrentMonth() {        Calendar calendar = Calendar.getInstance();        long[] monthTimestamps = DateUtils.getMonthStartEndTimestamps(calendar);        dateRangeLiveData.setValue(new Pair<>(monthTimestamps[0], monthTimestamps[1]));    }}